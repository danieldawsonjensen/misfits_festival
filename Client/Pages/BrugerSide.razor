@using System;
@using System.Net;
@using misfits_festival.Shared.Models;
@using Dapper;
@using Npgsql;
@using misfits_festival.Client.Services;
@using misfits_festival.Client.Pages;
@using System.Net.Http;

@inject Blazored.LocalStorage.ILocalStorageService localStore

@page "/bruger"

<h3>Bruger side</h3>

Skriv dit bruger id herunder:
<br />
<input @bind="brugerId" />
<br />
<button @onclick="UpdateLocalStorage">Save</button>
<button @onclick="ClearLocalStorage">Clear</button>

<div class="parent">

    <div class="vagter">
        <!--<div class="ledigevagter">-->

        <h1>Ledige vagter</h1>

        <table>
            <tr>
                <th>Vagt ID</th>
                <th>Dato</th>
                <th>Vagt start</th>
                <th>Vagt slut</th>
                <th>Pause</th>
                <th>Område</th>
                <th>Opgave ID</th> <!--Dette skal evt laves til en join m. OpgaveBeskrivelse i stedet-->
                <th>Bruger ID</th>
            </tr>
            @foreach (var vagt in Vagter)
            {
                <tr>
                    <td>@vagt.VagtId</td>
                    <td>@vagt.Dato</td>
                    <td>@vagt.VagtStart</td>
                    <td>@vagt.VagtSlut</td>
                    <td>@vagt.Pause</td>
                    <td>@vagt.Område</td>
                    <td>@vagt.OpgaveId</td>
                    <td>@vagt.BrugerId</td>
                </tr>
            }
        </table>
        <!--</div>-->

        <br />

        <!--<div class="brugervagter">-->

        <h1>Mine vagter</h1>

        <table>

            <tr>
                <th>Vagt ID</th>
                <th>Dato</th>
                <th>Vagt start</th>
                <th>Vagt slut</th>
                <th>Pause</th>
                <th>Område</th>
                <th>Opgave ID</th> <!--Dette skal evt laves til en join m. OpgaveBeskrivelse i stedet-->
                <th>Bruger ID</th>
            </tr>
            @foreach (var vagt in BrugerVagter)
            {
                <tr>
                    <td>@vagt.VagtId</td>
                    <td>@vagt.Dato</td>
                    <td>@vagt.VagtStart</td>
                    <td>@vagt.VagtSlut</td>
                    <td>@vagt.Pause</td>
                    <td>@vagt.Område</td>
                    <td>@vagt.OpgaveId</td>
                    <td>@vagt.BrugerId</td>
                </tr>
            }

        </table>


    </div>

    <br />
    <br />

    <div class="kompetencer">

        <table>

            <tr>
                <th>Kompetencer</th>
            </tr>
            <tr>
                <td>Førstehjælpskursus</td>
            </tr>
            <tr>
                <td>Kørekort</td>
            </tr>
            <tr>
                <td>Køkkencertifikat</td>
            </tr>

        </table>

    </div>

    <!--</div>-->

</div>


@code {
    const string noteKey = "note";
    string brugerId = "";
    public async void UpdateLocalStorage()
    {
        await localStore.SetItemAsync(noteKey, brugerId);
    }

    public async void ClearLocalStorage()
    {
        brugerId = "";
        await localStore.ClearAsync();
    }

    private List<Vagt> Vagter = new List<Vagt>();
    private List<Vagt> BrugerVagter = new List<Vagt>();

    private Vagt Vagt = new Vagt();


    [Inject]
    public IFrivilligService FrivilligService { get; set; } // laver en instans af vores interface,
                                                            // nu kan metoderne i interfacet bruges

    protected override async Task OnInitializedAsync()
    {
        brugerId = await localStore.GetItemAsync<string>(noteKey);
        Vagter = (await FrivilligService.GetLedigeVagter()).ToList();
        BrugerVagter = (await FrivilligService.GetMineVagter(brugerId)).ToList();
    }


}
