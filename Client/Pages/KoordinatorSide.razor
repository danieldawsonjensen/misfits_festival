@using System;
@using System.Net;
@using misfits_festival.Shared.Models;
@using Dapper;
@using Npgsql;
@using misfits_festival.Client.Services;
@using misfits_festival.Client.Pages;
@using System.Net.Http;

@inject Blazored.LocalStorage.ILocalStorageService localStore

@page "/koordinator"

<div class="brugerEmail">
    <!--
    Skriv herunder dit bruger id:
    <br />
    <input @bind="brugerId" />

    <br />

    <button @onclick="UpdateLocalStorage">Save</button>
    <button @onclick="ClearLocalStorage">Clear</button>
    -->

</div>

<br />

@if (KoordinatorLoggetInd!=null)
    {
        <h3>Vagter</h3>

        <div class="vagter">
            <table class="vagter">
                <tr>
                    <th>Vagt ID</th>
                    <th>Dato</th>
                    <th>Vagt start</th>
                    <th>Vagt slut</th>
                    <th>Pause</th>
                    <th>Område</th>
                    <th>Opgave beskrivelse</th>
                    <th>Bruger email</th>
                    <th>Status</th>
                </tr>
                @foreach (var vagt in Vagter)
                {
                    <tr>
                        <td>@vagt.VagtId</td>
                        <td>@vagt.Dato.ToShortDateString()</td>
                        <td>@vagt.VagtStart</td>
                        <td>@vagt.VagtSlut</td>
                        <td>@vagt.Pause</td>
                        <td>@vagt.Område</td>
                        <td>@vagt.OpgaveBeskrivelse</td>
                        <td>@vagt.BrugerEmail</td>
                        @if (vagt.Dato < DateTime.Now) // hvis dags dato er senere end vagtens, er status ikke done
                        {
                            <td>Done</td>
                        }
                        else
                        {
                            <td>Ikke done</td>
                        }
                        <!--De to knapper nedenfor bruges til at vælge om man vil slette eller opdatere end vagt, samt hvilkens-->
                        <button class="btn btn-success" @onclick="() => OpdaterVagt(vagt)">Opdater denne vagt</button>
                        <button class="btn btn-danger" @onclick="() => SletVagt(vagt)">Slet denne vagt</button>
                    </tr>
                }
            </table>
            <br />
        </div>

        <div class="parent">

            <div class="updatevagt">

                <EditForm EditContext="@EditContext" class="row p-3">
                    <!--Form til opdatering af en vagt-->
                    <h3>Update en vagt</h3>

                    <div class="col-2 mb-3">
                        <label for="NyVagtId">Vagt ID</label>
                        <InputNumber id="NyVagtId" @bind-Value="Vagt.VagtId" class="form-control" />
                    </div>

                    <br />

                    <div class="col-2 mb-3">
                        <label for="NyVagtStart">Vagt start</label>
                        <InputText id="NyVagtStart" @bind-Value="Vagt.VagtStart" class="form-control" />
                    </div>

                    <br />

                    <div class="col-2 mb-3">
                        <label for="NyVagtSlut">Vagt slut</label>
                        <InputText id="NyVagtSlut" @bind-Value="Vagt.VagtSlut" class="form-control" />
                    </div>

                    <br />

                    <div class="col-2 mb-3">
                        <label for="NyPause">Pause</label>
                        <InputNumber id="NyPause" @bind-Value="Vagt.Pause" class="form-control" />
                    </div>

                    <br />
                    <br />

                    <div class="col-12 mb-3">
                        <button class="btn btn-primary" @onclick="UpdateVagtHandler">Update vagt</button>
                    </div>


                </EditForm>

                <div class="sletvagt">

                    <EditForm EditContext="@EditContext">
                        <!--Form til sletning af en vagt-->

                        <h1>Slet en vagt</h1>

                        <div class="col-2 mb-3">
                            <label for="SletVagtId">Vagt ID</label>
                            <InputNumber id="SletVagtId" @bind-Value="SlettetVagt.VagtId" class="form-control" />
                        </div>

                        <div class="col-12 mb-3">
                            <button class="btn btn-primary" @onclick="() => DeleteVagtHandler(SlettetVagt.VagtId)">Slet vagt</button>
                        </div>

                    </EditForm>

                </div>

            </div>

            <div class="frivillige">

                <h1>Frivillige</h1>

                <table class="frivillige">
                    <tr>
                        <th>Bruger Navn</th>
                        <th>Bruger Email</th>
                        <th>Telefonnummer</th>
                        <th>Kompetencer</th>
                    </tr>
                    @foreach (var frivillig in Frivillige)
                    {
                        <tr>
                            <td>@frivillig.BrugerNavn</td>
                            <td>@frivillig.BrugerEmail</td>
                            <td>@frivillig.TelefonNummer</td>
                            <td>@frivillig.Kompetencer</td>
                        </tr>
                    }
                </table>

            </div>

        </div>

        <br />
        <br />
     
    }
    else
    {
        <h1>Du har ikke adgang</h1>
    }

@code {
    const string noteKey = "note";
    string brugerEmail = "";


    private EditContext EditContext;
    private EditContext SlettetEditContext; // definerer en sekundær EditContext; bruges til sletning af en vagt
    private int ErrorCode { get; set; }

    // definerer en liste af vagt-opbjekter samt en enkelt vagt; disse bruges hhv. i GetAlleVagter() og UpdateVagt()
    private List<Vagt> Vagter = new List<Vagt>();
    private Vagt Vagt = new Vagt();
    private Vagt SlettetVagt = new Vagt(); // definerer endnu et Vagt opbjekt der bruges til sletning af en vagt

    private List<Bruger> Koordinatorer = new List<Bruger>();

    private List<Bruger> Frivillige = new List<Bruger>(); // definerer en ny liste af brugere med rollen Frivillig

    private Bruger? KoordinatorLoggetInd = null;

    // interfaces der tages i brug i dette component
    [Inject]
    public IVagtService VagtService { get; set; }
    [Inject]
    public IBrugerService BrugerService { get; set; }

    protected override void OnInitialized() // initialiserer de to EditContext's
    {
        EditContext = new EditContext(Vagt);
        SlettetEditContext = new EditContext(SlettetVagt);
    }

    private async Task UpdateVagtHandler() // implementerer UpdateVagt(vagt) fra VagtService
    {
        ErrorCode = await VagtService.UpdateVagt(Vagt);
        Console.WriteLine("Vagt opdateret: " + ErrorCode);
        Vagt = new Vagt();
        EditContext = new EditContext(Vagt);
    }

    private async Task DeleteVagtHandler(int? vagtId) // implementerer DeleteVagt(brugerId) fra VagtService
    {
        vagtId = SlettetVagt.VagtId;
        ErrorCode = await VagtService.DeleteVagt(vagtId);
        Console.WriteLine("Vagt slettet: " + ErrorCode);
        Vagt = new Vagt();
        // SlettetEditContext = new EditContext(SlettetVagt);
        EditContext = new EditContext(SlettetVagt);
    }

    protected override async Task OnInitializedAsync()
    {
        brugerEmail = await localStore.GetItemAsync<string>(noteKey);
        Vagter = (await VagtService.GetAlleVagter()).ToList();
        Frivillige = (await BrugerService.GetAlleFrivillige()).ToList(); // populater vores liste af brugere v hjælp af,
                                                                         // getAlleFrivillige() metoden + toList
        Koordinatorer = (await BrugerService.GetAlleKoordinatorer()).ToList();
        if (brugerEmail != "")
        {

            foreach (Bruger koordinator in Koordinatorer)
            {
                if (koordinator.BrugerEmail == brugerEmail)
                {
                    KoordinatorLoggetInd = koordinator;
                }
            }

        }
    }

    private async Task OpdaterVagt(Vagt vagt)
    {
        Vagt.VagtId = vagt.VagtId;
        Vagt.VagtStart = vagt.VagtStart;
        Vagt.VagtSlut = vagt.VagtSlut;
        Vagt.Pause = vagt.Pause;
    }

    private async Task SletVagt(Vagt vagt)
    {
        SlettetVagt.VagtId = vagt.VagtId;
    }

}
